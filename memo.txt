# All the memo is kept here. Changes made by me(AndCharalampous) are inserted here #
# ΠΡΟΣΟΧΗ: ΘΑ ΠΡΟΣΠΑΘΗΣΕΙΣ ΝΑ ΣΚΕΦΤΕΙΣ ΟΤΙ ΨΩΝΙΣΤΗΚΑ. ΠΡΟΣΠΑΘΩ ΝΑ ΕΚΠΑΙΔΕΥΤΩ ΓΙΑ ΠΡΟΤΖΕΚΤ <3 #

Υπόμνημα:
	* --> Αλλαγές που έγιναν.
	~ --> Προτιμήσεις που δεν εφαρμόστηκαν (Για συζήτηση).
	> --> Τι πρέπει να προσέξουμε στην συνέχεια.
	} --> Δουλεία που θα κάνω εγώ στην συνέχεια.
	"" --> Πλάνο


@ Wed 25/07 - 03:12
....................
	* Φτιάξιμο δομής git
	* Έλεγχος κώδικα, εισαγωγή σχολίων(εκτός read_user_input()).
	* Προτίμησα σαν error code(returns) το -1 αντί το 1.
	* Άλλαξα την read_filter. Πλέον θεωρούνται σωστά τα εξής:
		+ Αρνητικοί, θετικοί και το μηδέν.
		+ Στους κινητής υποδιαστολής γίνεται αποκοπή δεκαδικών(π.χ 2.3 --> 2).
		+ Οτιδήποτε άλλο απορρίπτεται και η γραμμή ξαναδιαβάζεται.
	* Δημιουργία makefile. Όταν πρέπει, θα γίνει αλλαγή του CC σε mpicc.

	~ Η εισαγωγή των παραμέτρων(resolutions, seed etc.) να γίνεται από γραμμή εντολών, έχοντας και defaults.
	~ Στην allocate_mem_filter() να μην δίνεται το φίλτρο σαν όρισμα, αλλά να δημιουργείται και να επιστρέφεται.
	~ Μπορούμε να ενώσουμε την allocate_mem_filter() με την read_filter().
	~ Αποφυγή includes στα .h, εισαγωγή μόνο στα αντίστοιχα πηγαία(π.χ να φύγει το stdio από utils.h) -> agree

	> Το φίλτρο είναι μορφής int**, όμως μετά την κανονικοποίηση θα κρατάει float. -> agree
	> Memory allocations και memory errors(valgrind)


@ Wed 25/07 - 16:45
....................
	* Εύρεση πράξεων για διαμερισμό(στο χαρτί).
	* Μεταφορά includes από το utils.h.
	* Φτιάξιμο Κανονικοποιημένου Φίλτρου:
		+ Εάν sum == 0 || sum == 1, μένουν τα ίδια.

	~ Σχόλια:
	-> Καλύτερα όλα // και μόνο ετικέτες /* */ ή παντού /* */  <-----------------------------------------------------
		+ Στην ίδια γραμμή με εντολή: // Σχόλιο
		+ Επεξήγηση πάνω από εντολές: /* Σχόλιο */
		+ Ετικέτες αρχείων: /* Σχόλιο
		                     * Σχόλιο 
				     */
		+ Επεξηγήσεις συναρτήσεων: /* Σχόλιο */
		                           /* Σχόλιο */
					   ...
					   /* Σχόλιο */

	> Memory allocations και memory errors(valgrind).
	> Να αποφασίσουμε το seed για τυχαίες εικόνες. <-------------- οκ
	> Arguments vs Broadcast(} Args).
	} Διαμερισμός(δεν χρειάζεται να ασχοληθείς καθόλου).
@ The 26/07 - 10:13
....................
	* broadcast done -> είναι και πολύ καλό πιστεύω(στο Mpi μας χτυπάει το allocation μαλλόν κάνει Init όλους τους pointer να 		δείχνουν σε Null Και μετά καλούμε την allocation απλά βγαίνει αυτός ο έλεγχος. Δεν τον αλλαξά στο git μιας και έκανα αλλαγές στο 	δικό μου μόνο και ανέβασα μόνο Main .
	-> Να γίνει το **filter ->  filter[size][size]
	"" Άρα μένει να κάνουμε allocate τους πίνακες(find ranges), fill pixels, find neigbrous. Μετά χτυπάμε ένα barrier και timer και 	αρχίζουν οι υπολογισμοί. Με τους γείτονες μπορώ να βρώ εγώ τα τυπάκια και για το random να βρω ένα seed(τι βαθμό τυχαίοτητας 		θέλεις από 1-5 :p). Πρέπει να συζητήσουμε κάποια στιγμή σήμερα αύριο για την σύγκλιση - πότε σταματάει το loop.
