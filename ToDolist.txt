√ size of array -> debug
√ find neighbours / use NULL_MPI_process(etsi den stelnonte ta isend)
√ hallow points
√ fill arrays with random numbers(seed klp)
√ fix custom types -> for neighbours before isend (collumns, vectors etc). Δηλαδή ομαδοποίηση για ελαχιστοπίηση μυνημάτων όπως arguments
√ wait any -> το waitall να μην το δοκιμασούμε καν πάμε στο any που είναι πιο γρήγορο
√ init, start before isend, receive καλύτερα να γίνει μετά είναι κάτι μικρό και δεν αξίζει πριν λυθούν τα παραπάνω
* check when computations are done -> print results/ master. Με λίγα λόγια πότε υπάρχει σύγκλιση και είναι σταθερή η εικόνα.
* use timers() -> έχει στα αρχεία του Pacheco ένα .h με μια συνάρτηση να το χρησιμοποιήσουμε
* inline functions -> μεταγλωτιστής κλπ + makefile
* <--- Barrier <----
===========================================================================================================================================
Γενικά τα παραπάνω βγαίνουμε με τον κώδικα που έφτιαξα σε παρόμοια λογική μερικά θέλουν συζήτηση που θα μιλήσουμε.
Στην συνέχεια μόλις βγει και το openMP + virtual topology θα προσέξουμε γενικά Ifs, υπολογισμούς κλπ για να έχουμε καλό
παράλληλο πρόγραμμα και να μην κάνουμε έξτρα πράγματα κλπ.

* openMp
* virtual topology -> cartesian last improvement
* check - valgrind
* readme
√!!! <- Abort when user enters non perfect square processes, when error occured abort.

Γενικά διάβασα ότι το mpi δεν είναι σαν την c και πχ αν αποτύχει μια συνάρτηση γενικά τερματίζει το πρόγραμμα όποτε συνήθως σε
functions MPI_ το να ελέγεις για success δεν έχει νόημα πολύ μόνο στις c-like συναρτήσεις.



===========================================================================================================================================

√ NULL_MPI_process.
√ Αλλαγή της read_input():
   √ Θα δίνεται το Args_type σαν παράμετρος.
   √ Ο αριθμός των διεργασιών πρέπει να είναι τέλειο τετράγωνο.
   √ Το ύψος και πλάτος πρέπει να είναι μεγαλύτερα ή ίσα της sqrt(comm_size).
√ Φτιάξιμο extra στηλών-γραμμών για γειτονικά.
√ Εύρεση πώς θα κάνουμε τα hallow points.
-> Memory allocations and errors(valgrind).
=======================
√ Άλλαζα το inner calculation από: (int)x * y + (int) x2 * y2 σε: (int)(x * y + x2 * y2) γιατί το int(0.1) - > 0 και όλα τα αθροίσματα  βγαίνουν 0.
√ Διάβασα το τελευταίο link στο readme ότι αν προκύψει < 0 το κάνεις 0 και αν προκύψει > 255 το κάνεις 255. Αν βρεις άλλο τρόπο μου λες
√ Αν θες να κάνεις κάτι και βαρίεσαι θα σου πω λίγο για τα σχόλια γτ είναι περίεργα :p 

===================
- outer done minimum έλεγχος 5 Pixels ανά ομάδα
- mpiexec -n 4 valgrind --leak-check=full ./filter --> Προβλημα με vector column type
- Έχει και ένα μικρό θέμα με το free το image_before image_after ενώ κάνει σωστά swapp με το valgrind το παρατήρησα. Δεν φένετε γιατί σχολίασα τις γραμμές, προέχει το πάνω
- btw έσβησα τον κώδικα(όλα τα ifs και τα send init) και δεν έχει ερρορς αρα κατι παιζει μέσα, δηλαδή μεχρι commit και αμέσως τα frees είναι κομπλέ 
